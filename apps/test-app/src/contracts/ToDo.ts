/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* @ts-nocheck */

import { ExtractArgs } from '@dappql/core'
import { Address } from 'viem'

const abi = [
    {
        "type": "function",
        "name": "addItem",
        "stateMutability": "nonpayable",
        "inputs": [
            {
                "name": "_content",
                "type": "string"
            },
            {
                "name": "_status",
                "type": "uint256"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ]
    },
    {
        "type": "function",
        "name": "updateItem",
        "stateMutability": "nonpayable",
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_content",
                "type": "string"
            },
            {
                "name": "_status",
                "type": "uint256"
            }
        ],
        "outputs": []
    },
    {
        "type": "function",
        "name": "updateStatus",
        "stateMutability": "nonpayable",
        "inputs": [
            {
                "name": "_id",
                "type": "uint256"
            },
            {
                "name": "_status",
                "type": "uint256"
            }
        ],
        "outputs": []
    },
    {
        "type": "function",
        "name": "numItems",
        "stateMutability": "view",
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "uint256"
            }
        ]
    },
    {
        "type": "function",
        "name": "item",
        "stateMutability": "view",
        "inputs": [
            {
                "name": "arg0",
                "type": "address"
            },
            {
                "name": "arg1",
                "type": "uint256"
            }
        ],
        "outputs": [
            {
                "name": "",
                "type": "tuple",
                "components": [
                    {
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "name": "timestamp",
                        "type": "uint256"
                    },
                    {
                        "name": "content",
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "type": "uint256"
                    },
                    {
                        "name": "lastUpdated",
                        "type": "uint256"
                    }
                ]
            }
        ]
    }
] as const

const deployAddress: Address | undefined = '0x29B63f08aBa4Be48873238C23693a5550bC1E93F'

export type ToDoContract = {
  calls: {
    numItems: (arg0: `0x${string}`) => Promise<bigint>
    item: (arg0: `0x${string}`, arg1: bigint) => Promise<{ user: `0x${string}`; timestamp: bigint; content: string; status: bigint; lastUpdated: bigint }>
  }
  mutations: {
    addItem: (content: string, status: bigint) => Promise<bigint>
    updateItem: (id: bigint, content: string, status: bigint) => Promise<void>
    updateStatus: (id: bigint, status: bigint) => Promise<void>
  }
  events: {
    
  }
}

export type ToDoContractQueries = keyof ToDoContract['calls']
export function ToDoCall<M extends ToDoContractQueries>(
  method: M,
  args: ExtractArgs<ToDoContract['calls'][M]>,
  contractAddressOrOptions?:
  | Address
  | {
    contractAddress?: Address
    defaultValue?: Awaited<ReturnType<ToDoContract['calls'][M]>>
    },
  ) {
    const address =
      typeof contractAddressOrOptions === 'string' ? contractAddressOrOptions : contractAddressOrOptions?.contractAddress
    const defaultValue = typeof contractAddressOrOptions === 'string' ? undefined : contractAddressOrOptions?.defaultValue

    const call = {
      contractName: 'ToDo' as const,
      method,
      args,
      address,
      deployAddress,
      defaultValue,
      getAbi: () => abi,
      with: (options: { contractAddress?: Address; defaultValue?: Awaited<ReturnType<ToDoContract['calls'][M]>> }) => {
        call.address = options.contractAddress
        call.defaultValue = options.defaultValue
        return call
      }
    }

    return call
}

type ToDoCallType = {
  [K in ToDoContractQueries]: (
    ...args: ExtractArgs<ToDoContract['calls'][K]>
  ) => ReturnType<typeof ToDoCall<K>>
}

const call = {
		numItems: (...args: ExtractArgs<ToDoContract['calls']['numItems']>) => ToDoCall('numItems', args),
		item: (...args: ExtractArgs<ToDoContract['calls']['item']>) => ToDoCall('item', args),
}



export type ToDoContractMutations = keyof ToDoContract['mutations']
export function ToDoMutation<M extends ToDoContractMutations>(functionName: M) {
  return {
    contractName: 'ToDo' as const,
    functionName,
    deployAddress,
    argsType: undefined as ExtractArgs<ToDoContract['mutations'][M]> | undefined,
    getAbi: () => abi,
  }
}

const ToDo: {
  deployAddress: typeof deployAddress
  abi: typeof abi
  call: ToDoCallType
  mutation: typeof ToDoMutation
} = {
  deployAddress,
  abi,
  call,
  mutation: ToDoMutation,
}

export default ToDo
